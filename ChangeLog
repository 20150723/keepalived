2002-06-13  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.6.1 released.
	* Aneesh Kumar, <aneesh.kumar@digital.com> and I added support to
	  Cluster Infrastructure checkers. Providing HA-LVS for their cluster
	  project (http://ci-linux.sourceforge.net/). The new checker added
	  provide a derivation to the internal CI healthcheck mechanism.
	* Enhanced the Kernel netlink reflector to drive global healthcheckers
	  activity. The policy implemented here is : If healthchecker is performing
	  test on a service that belong to a VIP not owned by the director, then
	  the healthchecker is suspended. This suspend/active state is particulary
	  usefull if runing VRRP for HA => That way the backup LVS will not charge
	  the realserver pool since LVS VIP is owned by master LVS.
	* Cosmetics patches into the vector lib.
	* VRRP : Rewrote the previous VRRP synchronization instance policy.
	  Created a new config block called "vrrp_sync_group" that define VRRP
	  instances synchronization dependences. That way we replace the previous
	  "by-pair" sync approach by this "by-group" approach. This can be useefull
	  for firewall HA with many NICs. Created a dedicated framework to speed up
	  takeover synchronization.
	* VRRP : Added support to CIDR notation for VRRP VIPs definitions
	  => VRRP VIPs definition like a.b.c.d/e. By default "e" value is set to 32.
	* VRRP : Added support to multicast source IP address selection
	  => "mcast_src_ip" keyword. Can be usefull for strongly filtered env.
	  The mcast group subscription is done using the NIC default IP after this
	  mcast_src_ip is used if specified.
	* VRRP : Enhanced the link media failure detection. Added support to the
	  new kernel SIOCETHTOOL probing for ETHTOOL_GLINK command. New drivers
	  use this ETHTOOL interface to report link failure activity. During
	  bootstrap a probe is done to determine the proper polling method to
	  use for link media failure detection. The policy used is : probe for
	  SIOCGMIIREG if not supported then try SIOCETHTOOL GLINK probe, otherwise
	  use a ioctl SIOCGIFFLAGS polling function mirroring kernel NIC flags to
	  localy reflected representation.
	* Ramon Kagan, <rkagan@YorkU.CA> and I updated the UserGuide.pdf.

2002-05-30  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.9 released.
	* Added support to realserver_group. The work is not yet finished since
	  it introduces new compilation design currently not supported. So please
	  do not use yet.
	* VRRP : Review the script notification. Moved to a script per VRRP
	  instance state => Created new keywords notify_backup|master|fault
	  to run a specific script during backup|master|fault state transition.
	* VRRP : Added support to quoted strings for notify_backup|master|fault.
	  Can now launch script passing arguments.
	  See sample directory for examples.
	* VRRP : Added a protocol extension called "virtual_ipaddress_excluded".
	  This configuration block is similar to "virtual_ipaddress" block =>
	  those VIPs (called E-VIPs) are set throught netlink kernel channel and
	  gratuitous arp are sent over each E-VIP. The only difference is that
	  they are not added into VRRP packet adverts. This can be usefull for
	  big env where you want to run many VRRP VIPs (200 for example).
	  VRRP packet lenght are limited to a 20 VIPs, if you want more VRRP VIPs
	  add them to the "virtual_ipaddress_excluded" configuration block.
	* VRRP : Added more logging facility when setting/removings VIPs & E-VIPs.
	* VRRP : Created a new FSM state called become_master in charge of 
	  VIPs/E-VIPs/notifications handling. The goto_master state is now a state
	  where the instance send an advert to force a new MASTER election setting
	  the instance into a transition mode. If election success its finaly
	  transit to become_master state to own VIPs/E-VIPs and launch scripts.
	* VRRP : Force a new MASTER election when receiving a lower prio advert.
	* VRRP : Review the vrrp_scheduler.c to use more conventional FSM design.
	  This reduce and beautifull the code.
	* VRRP : Fixed a very noisy flapping issue observed on heavy loaded env.
	  Simulating big traffic on a backbone figure out this flapping issue.
	  Added support to a TIMER_MICRO_ADJUST to prevent against timer degradation.
	  This can be view as a DOS protection policy. VRRP MASTER timers are adjusted
	  if they are too degradated, due to heavy loaded networking env introducing
	  latency receiving/sending VRRP protocol adverts.
	  Thanks goes to Paul, <xerox@foonet.net> for pointing it out and providing
	  access to its Internet routing backbone.

2002-05-21  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.8 released.
	* Added an OpenSSL Licence exception to grant Keepalived compilation
	  with OpenSSL Toolkit.
	  Thanks to Andres Salomon, <dilinger@voxel.net> for suggesting.
	* Added connection port selection for Healthcheckers (TCP_CHECK,
	  HTTP|SSL_GET). Can be usefull for Healthcheck in fwmark LVS topology
	  for grouping service.
	  Thanks to Richard  L. Allbery, <rla@prideindustries.com> for suggection.
	  See samples directory for examples.
	* Fixed some IPVS exclusion code when running --disable-lvs.
	* Added support to VirtualHost selection when using HTTP|SSL_GET.
	  See samples directory for examples.
	* Added VirtualHost selection into the genhash utility.
	* Fixed some IPVS sync daemon initializations issues.
	* Cometics patches in IPVS wrapper framework.
	* Added support to quoted string. This can be usefull if you are using
	  MISC_CHECK and you want to pass arguments to called script. See samples.
	* Prepare work on real_server_group in order to group some realserver
	  declaration.
	* VRRP : Fixed a password length exception causing an unwanted dropping
	  issue.
	* VRRP : Enhanced the MASTER state to send gratuitous arp if receiving
	  a remote lower prio advert => This fix a remote stalled ARP cache.
	  Thanks to Simon Kirby, <sim@netnation.com> for discussing this case.

2002-05-02  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.7 released.
	* Review autoconf/automake scripts to be more generic on system and code
	  selection. Added primitives (configure) :
	    --disable-lvs-syncd : Do not use IPVS sync daemon
	    --disable-lvs       : Do not use IPVS framework
	    --disable-vrrp      : Do not use VRRP framework
	    --enable-debug      : Compile with debugging flags
	* Fixed a SSL stream handling bug.
	  Thanks to Andres Salomon, <dilinger@voxel.net> for pointing the issue.
	* Added a global memory counter to track global memory used.
	* Fixed configuration parser. read_line. Remove static allocated
	  temporary read buffer. Only handle stream if line has been spitted into
	  vector.
	* Limit maximum number of VIPs per VRRP Instance to 20. (for fragmentation,
	  overhead, and others reasons).
	* Added IPVS wrapper support to persistence granularity.
	  Thanks to Mike Zimmerman, <tarmon@spamcop.net> for the suggestion.
	* Review smtp notifier to handle VRRP MASTER state transition alert.
	  Thanks to Paul, <xerox@foonet.net> for the suggestion.
	* Review the UserGuide.pdf to fixe some english issues :)
	  Thanks to Jacques Thomas, <jacktom@noos.fr> for reviewing.

2002-04-13  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.6 released.
	* VRRP : Review in "GOTO_MASTER_STATE" the IP address handling.
	  send protocol adverts before registering IP address to the interface.
	* VRRP : Review the "LEAVE_MASTER_STATE" to only handle state transition
	  if wanted states are BACKUP or FAULT.
	* VRRP : Review the BACKUP state to force new protocol election if
	  receiving a lower priority advert.
	* VRRP : Fixed a BACKUP to MASTER state transition only if interface is
	  reported UP.
	* VRRP : Fake the "ipvs_syncd_cmd" function if running LVS using a Kernel
	  2.2.

2002-04-10  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.5 released.
	* Fixed a gratuitous ARP porting bug.
	* VRRP : Review the data structure to be more generic
	  and clean with the rest of the code.
	* VRRP : Remove the interface flags (NIC) ioctl functions
	* VRRP : Created an interface (NIC) library giving access
	  to common interface helpers functions.
	* VRRP : Created an interface lookup function creating a global
	  interface structure during daemon bootstrap. Consist of a netlink
	  RTM_GETLINK & RTM_GETADDR lookup, so we can work with a userspace
	  interface representation.
	* VRRP : Create a netlink kernel reflection framework updating
	  dynamically our interface structure according to kernel
	  netlink broadcast. This design is highly inspired from zebra.
	  => Reflection mean : wait for netlink kernel broadcast, if received,
	  wakeup netlink filter to update our userspace representation.
	  Prefer this design instead of a delayed netlink poller. That way
	  we reduce global overhead.
	* VRRP : VRRP need to detect failure from many places.
	  If netlink can notify for many troubles like mainly
	  IFF_UP|DOWN & IFF_RUNNING, those flags are kernel drivers dependent.
	  To reduce takeover time and performance we need to have informations like
	  : Does the media link is present ?. The fact is that most of the new NICs
	  own embended hardware chip providing such informations. So created a
	  MII transceiver status register thread poller. Monitoring Basic Mode
	  Status Register (BMSR) of the MII status words. Waiting for kernel
	  NIC drivers hackers to support this functionnality through netlink
          (=> Like a IFF_RUNNING update broadcast).
	* VRRP : Linked the state machine to the global interface structure.
	  NIC failure/events are handled.
	* VRRP : Review the whole state machine code to be more realistic. The
	  State transition diagram described into the RFC2338 is an obtimist
	  view. The VRRP state transition diagram implemented here is :

                              +---------------+
                   +--------->|               |<-------------+
                   |          |  Initialize   |              |
                   |   +------|               |----------+   |
                   |   |      +---------------+          |   |
                   |   V                                 V   |
           +---------------+                       +---------------+
           |               |---------------------->|               |
           |    Master     |                       |    Backup     |
           |               |<----------------------|               |
           +---------------+                       +---------------+
            ^   |     |                                   |    ^
            |   |     |       +---------------+           |    |
            |   |     +------>|  Dummy Master |           |    |
            |   |             +---------------+           |    |
            |   |                     |                   |    |
            |   |                     V                   |    |
            |   |             +---------------+           |    |
            |   +------------>|               |<----------+    |
            |                 |     Fault     |                |
            +-----------------|               |----------------+
                              +---------------+

	* VRRP : Robust multicast handling. Something really strange
	  is : after a NIC failure (in fallback mode) without closing
	  the socket, multicast advert can be sent but not received ?
	  really strange don t know why probably an IGMP resubmit ?.
	  So multicast group is left during failover (media trouble,
          IFF_DOWN or !IFF_RUNNING). In fallback, we register a new
	  membership and synchronize all the packet dispatcher fds.
	* VRRP : Fixed a checksum trouble using password authentication.
	* VRRP : Added support to the LVS sync daemon. This permit
	  LVS sync daemon to be state drived by a specific VRRP instance.
	* Review the autoconf/automake to be more generic.
	* Some cosmetics patches.

2002-02-25  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.5.3 released.
	* Added autoconf / automake generic scripts.
	* Rewrite the configuration file stream parser.
	  Using a generic keywords tree. Each keyword refer a specific
	  stream handler. The main stream processor is a multilevel
	  recursive function getting file stream and backtracking the
	  keyword tree. Kind of global compiler structure using event driven
	  stream processing.
	* Re-design the global data structure to be much more generic and
	  to dissociate LVS configuration related to checkers related. Remove
	  static char lenght to use dynamic length strings.
	* Created a global timer framework.
	* Created a global vector template, used in cofiguration file
	  parsing (both stream process & keywords tree generation).
	* Created a global list template, used in most of the code.
	* Review the global scheduler to remove repeated code.
	* Created a global checkers API. The design and goal here is to
	  facilitate new checkers creation by localizing specific checker
	  code into a single file without any other global framework
	  integration.
	* Patched a SSL stream handling race condition finding end of stream.
	* Jan Holmberg, review MISC checker to use forked process to not degrade
	  global scheduler timer.
	* Revisited the whole code to use new templates structures.
	* Fixed a url lentgh bug into the genhash utility.
	* Fabrice Bucher, <fabrice.bucher@urbanet.ch> fixed a timeout_persistence
	  bug in the IPVS wrapper code.
	* Bradley McLean, <bradlist@bradm.net> added support to '0' port number
	  service in VS manipulation. Useful for balancing all services (host rather
	  than service).
	* Matthijs van der Klip, <matthijs.van.der.klip@nos.nl> enhanced smtp
	  framework to use SMTP header and email enclosed with angle brackets.

2001-12-20  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.4.9a released.
	* Jan and I patched a memory pointer problems in vrrp_scheduler.c
	  Thanks to Negrea Mihai, <mike@umft.ro> for reporting.
	* Jan Holmberg, patched a memory reallocation pointer
	  exception in memory management framework.
	* Jan Holmberg, patched a vrrp vip set/remove retry.
	* Some cosmetics/logging patches.
	* Created Keepalived UserGuide.

2001-12-10  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.4.9 released.
	* Jan Holmberg, <jan@artech.net> added a memory managment framework.
	  In debug mode it is used as a memory leak buster. We can so use it
	  to debug quickly memory leaks (buffer overrun, allocation errors, ...).
	* Jan Holmberg and I added support to SSL. Checker SSL_GET. Can be used
	  with autogenerated cert or with specific cafile, certfile, keyfile.
	* Use the OpenSSL, <www.openssl.org> library for MD5 & SSL functions.
	* Jan Holmberg and I Rewrote the HTTP_GET code to use full asynchronous
	  stream handling. The code use a common part for HTTP/SSL stream handling.
	  Review the MD5 digest buffer computation, update MD5 over received buffer.
	* Patched some memory leaks in smtp handling.
	* Jan Holmbarg added support to LVS FWMARK.
	* Added command line option for keepalived. Used the libpopt library.
	  -h, -v, -n, -d, -l, -f.
	* Jan Holmberg and I added debugging facility on keepalived console.
	* Added a BOOTSTRAP_DELAY of 1sec when registering checkers during
	  daemon bootstrap.
	* VRRP : Jan Holmberg added possibility to run an extra script when
	  VRRP Instance become or leave MASTER STATE (=> using a forked process).
	* Review/fine the whole code to apply cosmetics patch.
	* Rewrote the genhash utility.
	* Started checkers API specs.
	* doc doc doc...

2001-11-20  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.4.8 released.
	* Rewrite the whole VRRP previous code.
	* VRRP : Created a hierarchic scheduling framework.
	  Handle VRRP instances multiplexing on the same I/O fd.
	  VRRP I/O events are handled by our global scheduling 
	  framework. Then the global sheduling framework call a VRRP
	  I/O instance dispatcher to manage VRRP instances.
	* VRRP : Created a temporary socket pool to handle register
	         our VRRP thread instances.
	  We create & allocate a socket pool here. The soft design
	  can be sum up by the following sketch :
 
	         fd1  fd2    fd3  fd4          fdi  fdi+1
	      -----\__/--------\__/---........---\__/---
	         | ETH0 |    | ETH1 |          | ETHn |
	         +------+    +------+          +------+
 
 	  Here we have n physical NIC. Each NIC own a maximum of 2 fds.
	  (one for VRRP the other for IPSEC_AH). All our VRRP instances
	  are multiplexed through this fds. So our design can handle 2*n
	  multiplexing points.
	* VRRP : Review the multicast socket creating. We bind the socket
	  to a specific NIC. inbound & outbound traffic are bound to the
	  NIC.
	  => why IP_ADD_MEMBERSHIP & IP_MULTICAST_IF doesnt set
	     sk->bound_dev_if themself ??? !!!
	     Needed for filter multicasted advert per interface.
	  => For inbound binding we use SO_BINDTODEVICE kernel option.
	* VRRP : Created a read dispatcher thread to deal with our sockpool.
	  Handle VRRP states & transition states.
	* VRRP : Created a VRRP synchronization instance circuit. This
	  functionnality gave you the ability to monitor VRRP instance
	  each other. This mean that if 2 VRRP instances are monitoring 
	  themself and if one of this instance change state, the other
	  follow the same state. ex.: With 2 VRRP instances (VI_1 & VI_2)
	  if VI_1 become backup then VI_2 become backup too. (symetricly
	  with master VRRP state).
	* VRRP : Rewrite the netlink interface to use non blocking socket.
	* VRRP : Rewrite the ipaddress handling to use the new netlink
	  interface.
	* VRRP : Remove the VRPP VMAC handling since linux kernel only
	  permit to use one MAC address on a specific NIC. We use gratuitous
	  arp when setting up VRRP VIP, to uptade remote host arp caches.
	  => In certain case this can cause a TCP session renegociation
	     which can cause a permature session end.
	  => To be fully compliant with the VRRP RFC, need to patch the
	     kernel to gave it the possibility to deal with more than one
	     MAC address at a time. Give me clue on it please ! to same me
	     a little time :)
	* Starting VRRP documentation.
	* Patch a pidfile handling bug when forking the keepalived daemon.
	  Thanks goes to Gianni D'Aprile for pointing it to me.
	* Patch a timer race condition into the scheduling framework.
	  This bug caused tcpcheck to respawn quickly...
	  Thanks goes to Gianni D'Aprile for pointing it to me.

2001-11-04  Alexandre Cassen  <acassen@linux-vs.org>
        * keepalived-0.3.8 released.
        * Added support to native IPTABLE LVS CODE
          => using NAT on 2.4 kernel ipchains kernel support
             has been removed.
        * Added support to Direct Routing & Tunneling.
        * Review the keepalived.init script to be much more generic.

2001-09-14  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.4.1 released.
	* Added support to LVS kernel 2.4 code

2001-08-23  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.4.0 released.
	* Patch a race condition into the scheduler timer computation.
	* Patch a race condition into the tcp checker thread. Only
	  register next timer thread if tcp connection is not in progress.
	* Patch a race condition into the http checker thread. Handle
	  empty buffer returned from remote http server.
	* Patch a race condition into the dumping configuration process.
	  A simple dereferencing pointer value...oops...
	* Eric Jarman, <ehj38230@cmsu2.cmsu.edu> added MISC CHECKER.
	  It Perform a system call to run an extra system or script.
	  => security auditing needed for system call,
	  buffer overflow over script path must be handled.

	* Added VRRP support using our scheduling I/O multiplexer.
	  VRRP implementation support to IPSEC-AH using HMAC-96bits digest
	  with anti-replay. rfc2402 & rfc2104.
	* Added routing table fetcher. We ignore route when it is a
	  cloned route from other router, learn by an ICMP redirect
	  or set by kernel. Only UNICAST route are stored.
	* Added dropping packet support.

2001-07-15  Alexandre Cassen  <acassen@linux-vs.org>
	* keepalived-0.3.5 released.
        * Rewrite the whole signal handling, registering a terminating
          thread on signal.
        * Move logsystem to syslog using facility LOG_INFO & LOG_DEBUG.
        * Added a daemonization function imported from zebra.
        * Rewrite the pidfile handling, check if daemon is running, if not
          remove eventual stalled pidfile and create new pidfile.
        * Added a strong scheduling framework based on an I/O multiplexer
          to handle asynchronous process. This code is imported from zebra
          and have been enhanced for keepalived purposes.

          Thread types are :
          . timeouted read on fd.
          . timeouted write on fd.
          . timer.
          . event.
          . terminate event.

          => The zebra framework have been enhanced to add support for timeouted
             read/write fds.

          => With this framework keepalived use a Boss/Worker thread model design,
             fetching ready thread from a master threading queues.

        * Rewrite the configuration file reader to add flexibility on extending.
          The dynamic data structure has been rewritten to use apropriate types.
          Right now parsing framework is ready for easy new checker structures
          integration.
        * Rewrite the smtp connector. The implementation take advantage of the
          I/O multiplexer. All read/write operations from/to the remote smtp server
          are done asynchronously. The implementation is rfc 821 compliant (multiple
          receiver are handled by a multiple RCPT TO command as specified in rfc821.3.1).
        * Rewrite the IPFW & IPVS wrappers.
        * Added support for NAT mask on IP MASQ rules (keyword nat_mask in configuration
          file). Added support for sorry server facility, so when all the server from a 
          VS server pool are removed, a sorry server is automaticaly added to the VS pool 
          (typically this is used when you have a spare server online).
        * Rewrite the previous checkers. Checkers are now based on a hierarchic layer
          stack framework. The protocol implemented for the moment is TCP. All layer 5
          checkers are using layer4.c primitives with the same design :

          . a checker connector thread (creating the socket) registering the connection
            checker thread.
          . a connection checker thread testing connection states (error, in_progress,
            timeout, success). When connection success upper level thread are registered
            to handle checks.
        * Delay loop is now checkers specifics since we can use a multithreaded framework.
        * Update the PDF documentation file.
